getwd()
dir()
dir("./figure/")
source('~/.active-rstudio-document', echo=TRUE)
hist(activity_summarized$SumSteps, main = "Histogram of the total number of steps taken each day\n(NAs not treated)", xlab = "Total steps per day", col = "blue", ylim=40)
#Saving the figure for further recycling
hist(activity_summarized$SumSteps, main = "Histogram of the total number of steps taken each day\n(NAs not treated)", xlab = "Total steps per day", col = "blue", ylim=40)
hist(activity_summarized$SumSteps, main = "Histogram of the total number of steps taken each day\n(NAs not treated)", xlab = "Total steps per day", col = "blue", ylim=40)
hist(activity_summarized$SumSteps, main = "Histogram of the total number of steps taken each day\n(NAs not treated)", xlab = "Total steps per day", col = "blue", ylim = 40)
hist(activity_summarized$SumSteps, main = "Histogram of the total number of steps taken each day\n(NAs not treated)", xlab = "Total steps per day", col = "blue", ylim = "40")
hist(activity_summarized$SumSteps, main = "Histogram of the total number of steps taken each day\n(NAs not treated)", xlab = "Total steps per day", col = "blue", ylim = 30)
hist(activity_summarized$SumSteps, main = "Histogram of the total number of steps taken each day\n(NAs not treated)", xlab = "Total steps per day", col = "blue", ylim = 20)
hist(activity_summarized$SumSteps, main = "Histogram of the total number of steps taken each day\n(NAs not treated)", xlab = "Total steps per day", col = "blue", ylim = 70)
hist(activity_summarized$SumSteps, main = "Histogram of the total number of steps taken each day\n(NAs not treated)", xlab = "Total steps per day", col = "blue", x = c(0,40))
hist(activity_summarized$SumSteps, main = "Histogram of the total number of steps taken each day\n(NAs not treated)", xlab = "Total steps per day", col = "blue", x = c(-1,40))
hist(activity_summarized$SumSteps, main = "Histogram of the total number of steps taken each day\n(NAs not treated)", xlab = "Total steps per day", col = "blue", x = c(,400))
hist(activity_summarized$SumSteps, main = "Histogram of the total number of steps taken each day\n(NAs not treated)", xlab = "Total steps per day", col = "blue", x = c(400,400))
hist(activity_summarized$SumSteps, main = "Histogram of the total number of steps taken each day\n(NAs not treated)", xlab = "Total steps per day", col = "blue")
hist(activity_summarized$SumSteps, main = "Histogram of the total number of steps taken each day\n(NAs not treated)", xlab = "Total steps per day", col = "blue",ylim = 0:40)
hist(activity_summarized$SumSteps, main = "Histogram of the total number of steps taken each day\n(NAs not treated)", xlab = "Total steps per day", col = "blue",ylim = c(0,40))
hist(activity_summarized$SumSteps, main = "Histogram of the total number of steps taken each day\n(NAs not treated)", xlab = "Total steps per day", col = "blue",ylim = c(0,35))
render("PA1_template.Rmd", clean = FALSE)
library(rmarkdown)
render("PA1_template.Rmd", clean = FALSE)
aggregate(steps~ interval,activity_completed,mean)
source('~/.active-rstudio-document', echo=TRUE)
aggregate(steps~ interval,activity_completed,mean)
source('~/.active-rstudio-document', echo=TRUE)
activity_summarized <- aggregate(steps ~ interval, act_clean, mean)
plot(x = activity_summarized$interval, y = activity_summarized$steps)
activity_summarized <- aggregate(steps ~ interval, act_clean, mean)
activity_summarized <- aggregate(steps ~ interval, activity, mean)
plot(x = activity_summarized$interval, y = activity_summarized$steps)
plot(x = activity_summarized$interval, y = activity_summarized$steps, type = "l")
plot(x = activity_summarized$interval, y = activity_summarized$steps, type = "l", xlab = "Interval", ylab = "Number of steps, avg."
plot(x = activity_summarized$interval, y = activity_summarized$steps, type = "l", xlab = "Interval", ylab = "Number of steps, avg.")
plot(x = activity_summarized_interval$interval, y = activity_summarized_interval$steps, type="l", xlab = "Interval", ylab = "Number of steps, avg." , main = "Average daily activity pattern")
activity_summarized_interval <- aggregate(steps ~ interval, activity, mean)
plot(x = activity_summarized_interval$interval, y = activity_summarized_interval$steps, type="l", xlab = "Interval", ylab = "Number of steps, avg." , main = "Average daily activity pattern")
source('~/.active-rstudio-document', echo=TRUE)
activity_completed
weekendindx <- grep("Su|Sa|So",weekdays(activity_completed$date, abbreviate = TRUE))
activity_summarized <- activity_completed[weekendindx]$weekend <- as.factor("weekend")
table(activity_completed$weekend)
head(activity_completed)
aggregate(activity_summarized, steps ~ c(weekend,interval),abs)
aggregate(steps ~ c(weekend,interval), activity_summarized, abs)
aggregate(steps ~ c(weekend,interval), activity_summarized, abs)
activity_summarized%>% group_by(weekend,interval)
activity_summarized%>%group_by(interval)
activity_summarized%>%group_by(weekend)
aggregate(steps ~ interval, activity_summarized, abs)
aggregate(activity_summarized$steps ~ activity_summarized$interval, activity_summarized, abs)
activity_summarized <- activity_completed[weekendindx]$weekend <- as.factor("weekend")
class(activity_summarized)
activity_summarized <- activity_completed[weekendindx,]$weekend <- as.factor("weekend")
class(activity_summarized)
activity_completed[weekendindx,]$weekend <- as.factor("weekend")
table(activity_completed$weekend)
aggregate(steps ~ activity_completed$interval, activity_completed)
aggregate(steps ~ activity_completed$interval, activity_completed,mean)
aggregate(steps ~ c(interval,weekend), activity_completed,mean)
aggregate(steps ~ c(interval,weekend), activity_completed,mean)
activity_completed%>%group_by(weekend,intrval)
activity_completed%>%group_by(weekend,interval)
dim(activity_completed%>%group_by(weekend,interval))
dim(activity_completed)
dim(activity_completed%>%group_by(c(weekend,interval))
)
dim(activity_completed%>%group_by(c(weekend,interval))
)
group_by(activity_completed,interval,weekend)
dim(group_by(activity_completed,interval,weekend))
dim(aggregate(activity_completed,steps ~ c(interval,weekend)))
dim(aggregate(activity_completed,steps ~ c(interval,weekend),mean)
)
dim(aggregate(activity_completed,by = c(interval,weekend),mean)
)
?aggregate
aggregate(x = activity_completed, by = c(weekend, interval), FUN = mean)
aggregate(x = activity_completed, by = c(activity_completed$weekend, activity_completed$interval), FUN = mean)
aggregate(x = activity_completed, by = list(activity_completed$weekend, activity_completed$interval), FUN = mean)
head(aggregate(x = activity_completed, by = list(activity_completed$weekend, activity_completed$interval), FUN = mean))
View(aggregate(x = activity_completed, by = list(activity_completed$weekend, activity_completed$interval), FUN = mean))
library(lattice)
with(activity_summarized,xyplot(steps ~  seq(along = interval)| Group.1, type = "l", layout = c(1, 2), lty=1, xlab = "Interval", ylab = "Number of steps"))
with(activity_summarized,xyplot(steps ~  seq(along = interval)| weekend, type = "l", layout = c(1, 2), lty=1, xlab = "Interval", ylab = "Number of steps"))
activity_summarized <- activity_completed%>%group_by(weekend,interval)
View(activity_summarized)
activity_summarized <- aggregate(x = activity_completed, by = list(activity_completed$weekend, activity_completed$interval), FUN = mean)
with(activity_summarized,xyplot(steps ~  seq(along = interval)| weekend, type = "l", layout = c(1, 2), lty=1, xlab = "Interval", ylab = "Number of steps"))
activity_summarized <- aggregate(x = activity_completed, by = list(weekend, $interval), FUN = mean)
activity_summarized <- aggregate(x = activity_completed, by = list(weekend, interval), FUN = mean)
aggregate(x = activity_completed, by = list(weekend, interval), FUN = mean)
activity_summarized <- with(activity_completed, aggregate(x = activity_completed, by = list(weekend, interval), FUN = mean))
dim(activity_summarized)
colnames(activity_summarized)
head(activity_summarized)
with(activity_summarized,xyplot(steps ~  seq(along = interval)| weekend, type = "l", layout = c(1, 2), lty=1, xlab = "Interval", ylab = "Number of steps"))
par(mfrow = c(2,1))
with(activity_summarized,xyplot(steps ~  seq(along = interval)| weekend, type = "l", layout = c(1, 2), lty=1, xlab = "Interval", ylab = "Number of steps"))
library(lattice)
with(activity_summarized,xyplot(steps ~  seq(along = interval)| weekend, type = "l", layout = c(1, 2), lty=1, xlab = "Interval", ylab = "Number of steps"))
activity_summarized
with(activity_summarized,xyplot(steps ~  seq(along = interval)| Group.1, type = "l", layout = c(1, 2), lty=1, xlab = "Interval", ylab = "Number of steps"))
with(activity_completed,xyplot(steps ~  seq(along = interval)| weekend, type = "l", layout = c(1, 2), lty=1, xlab = "Interval", ylab = "Number of steps"))
with(activity_summarized,xyplot(steps ~  seq(along = interval)| Group.1, type = "l", layout = c(1, 2), lty=1, xlab = "Interval", ylab = "Number of steps"))
activity_completed$weekend <- as.factor("weekday")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
weekendindx <- grep("Su|Sa|So",weekdays(activity_completed$date, abbreviate = TRUE))
activity_completed[weekendindx,]$weekend <- as.factor("weekend")
head(activity_completed)
head(activity_completed,n=30)
tab(activity_completed$weekend)
table(activity_completed$weekend)
activity_summarized <- with(activity_completed, aggregate(x = activity_completed, by = list(weekend, interval), FUN = mean))
activity_summarized <- with(activity_completed, aggregate(x = activity_completed, by = list(weekend, interval), FUN = mean))
with(activity_completed, aggregate(x = activity_completed, by = list(weekend, interval), FUN = mean))
with(activity_completed, aggregate(x = activity_completed, by = list(weekend, interval), FUN = mean))
activity_summarized <- with(activity_completed, aggregate(x = activity_completed, by = list(weekend, interval), FUN = mean))
activity_summarized
head(activity_summarized)
library(lattice)
with(activity_summarized,xyplot(steps ~  seq(along = interval)| Group.1, type = "l", layout = c(1, 2), lty=1, xlab = "Interval", ylab = "Number of steps"))
library(lattice)
with(activity_summarized,xyplot(steps ~  seq(along = interval)| Group.1, type = "l", layout = c(1, 2), lty=1, xlab = "Interval", ylab = "Number of steps"))
length(activity_completed$interval)
length(unique(activity_completed$interval))
summary(activity_completed$interval)
activity_completed$interval
unique(activity_completed$interval)
activity_completed$weekend <- as.factor("weekday")
#Dont worry, pattern "So" is for german "Sonntag" (Sunday)
weekendindx <- grep("Su|Sa|So",weekdays(activity_completed$date, abbreviate = TRUE))
activity_completed[weekendindx,]$weekend <- as.factor("weekend")
activity_summarized <- with(activity_completed, aggregate(x = activity_completed, by = list(weekend, interval), FUN = mean))
activity_summarized <- with(activity_completed, aggregate(x = activity_completed, by = list(weekend, interval), FUN = mean))
activity_summarized <- with(activity_completed, aggregate(x = activity_completed, by = list(weekend, interval), FUN = mean))
activity_summarized <- aggregate(x = activity_completed, by = list(weekend, interval), FUN = mean)
activity_summarized <- aggregate(x = activity_completed, by = list(activity_completed$weekend, activity_completed$interval), FUN = mean)
if (!file.exists("activity.csv")) {
if (!file.exists("activity.zip")) {
fil <- download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip", destfile = "activity.zip", mode = "wb")
unzip("activity.zip")
}
else { unzip("activity.zip") }
}
if(!dir.exists("figure")) dir.create("figure")
library(data.table)
activity <- data.table(read.csv("activity.csv",colClasses = c("numeric","Date","numeric")))
head(activity)
summary(activity)
str(activity)
library(dplyr, verbose = FALSE, quietly = TRUE)
activity_summarized <- activity%>%group_by(date)%>%summarize(SumSteps = sum(steps), MeanSteps = mean(steps), MedianSteps = median(steps))
head(activity_summarized)
hist(activity_summarized$SumSteps, main = "Histogram of the total number of steps taken each day\n(NAs not treated)", xlab = "Total steps per day", col = "blue", ylim = c(0,40))
#Saving the figure for further recycling
dev.copy(png, file = "figure/Total_number_steps_with_NA.png")
dev.off()
#For  comparisons in future...
activity_summarized_before <- copy(activity_summarized)
activity_summarized$SumSteps <- NULL
activity_summarized
activity_summarized_interval <- aggregate(steps ~ interval, activity, mean)
plot(x = activity_summarized_interval$interval, y = activity_summarized_interval$steps, type="l", xlab = "Interval", ylab = "Number of steps, avg." , main = "Average daily activity pattern", lwd = 2, col = "darkgreen")
plot( y = activity$steps, x = seq(along = activity$steps), type="l", main = "Time series plot of steps in the 5-minute intervalls",lty= 1, xlab = "Time intervals of 5 min.", ylab = "Number of steps")
abline(h = mean(activity$steps, na.rm = TRUE), lwd = 2, col = "red")
legend("topright", legend = "Steps taken, avg. all days", lty = 1, col = "red" )
```
## The 5-minute interval that, on average, contains the maximum number of steps
```{r, echo = TRUE}
day <- activity$date[which.max(activity$steps)]
hours <- as.integer(activity$interval[which.max(activity$steps)]/60)
minutes <- activity$interval[which.max(activity$steps)]%%60
print(paste("Start:",strptime(paste(day,hours,minutes), "%Y-%m-%d %H %M"),tz="UTC"));print(paste("End:",strptime(paste(day,hours,minutes+4,59), "%Y-%m-%d %H %M %S"), tz="UTC"));print(paste("Max. number of steps:", max(activity$steps, na.rm = TRUE)))
sapply(activity, function(x) sum(is.na(x)))
activity_summarized <- activity%>%group_by(interval)%>%summarize(MeanSteps = mean(steps, na.rm = TRUE))
activity_summarized$interval <- as.factor(activity_summarized$interval)
setkey(activity_summarized, interval)
#NB! Data tables are approached by reference, so copy() here to preserve the original data
activity_completed <- copy(activity)
for (i in seq(along = activity_completed$interval)) {
if (is.na(activity_completed[i,]$steps)) {
activity_completed[i,]$steps <- activity_summarized[as.character(activity_completed[i,]$interval)]$MeanSteps
}
}
activity
activity_completed
activity_summarized <- activity_completed%>%group_by(date)%>%summarize(SumSteps = sum(steps, na.rm = TRUE), MeanSteps = mean(steps, na.rm = TRUE), MedianSteps = median(steps, na.rm = TRUE))
activity_summarized
hist(activity_summarized$SumSteps, main = "Histogram of the total number of steps taken each day\n(NAs substituted with means across an interval)", xlab = "Total steps per day", col = "blue", ylim = c(0,40))
activity_summarized_before
activity_completed$weekend <- "weekday"
#Dont worry, pattern "So" is for german "Sonntag" (Sunday)
weekendindx <- grep("Su|Sa|So",weekdays(activity_completed$date, abbreviate = TRUE))
activity_completed[weekendindx,]$weekend <- "weekend"
activity_summarized <- aggregate( activity_completed, by = list(weekend, interval), FUN = mean)
library(lattice)
with(activity_summarized,xyplot(steps ~  interval| Group.1, type = "l", layout = c(1, 2), lty=1, xlab = "Interval", ylab = "Number of steps"))
xyplot()
activity_completed$weekend <- "weekday"
#Dont worry, pattern "So" is for german "Sonntag" (Sunday)
weekendindx <- grep("Su|Sa|So",weekdays(activity_completed$date, abbreviate = TRUE))
activity_completed[weekendindx,]$weekend <- "weekend"
head(activity_completed)
table(activity_completed$weekend)
activity_completed[weekendindx,]$weekend <- "weekend"
activity_summarized <- aggregate( activity_completed, by = list(weekend, interval), FUN = mean)
activity_summarized <- aggregate( activity_completed, by = list(activity_completed$weekend, interval), FUN = mean)
activity_summarized <- aggregate( activity_completed, by = list(activity_completed$weekend, activity_completed$interval), FUN = mean)
activity_summarized
library(lattice)
with(activity_summarized,xyplot(steps ~  interval| Group.1, type = "l", layout = c(1, 2), lty=1, xlab = "Interval", ylab = "Number of steps"))
with(activity_summarized,xyplot(steps ~  Group.2| Group.1, type = "l", layout = c(1, 2), lty=1, xlab = "Interval", ylab = "Number of steps"))
xyplot()
xyplot(steps ~  Group.2| Group.1, data = activity_summarized)
xyplot(steps ~  Group.2| Group.1, data = activity_summarized, type = "l", layout = c(1, 2), lty=1, xlab = "Interval", ylab = "Number of steps")
activity_summarized <- aggregate( activity_completed, by = list(activity_completed$weekend == "weekend", activity_completed$interval), FUN = mean)
warnings()
activity_summarized <- aggregate( activity_completed, by = list((activity_completed$weekend == "weekend"), activity_completed$interval), FUN = mean)
warnings()
activity_summarized <- aggregate( activity_completed, by = list(activity_completed$interval), FUN = mean)
warnings()
activity_summarized <- aggregate( activity_completed, by = list(interval), FUN = mean)
class(activity_completed$interval)
activity_summarized <- aggregate( activity_completed, by = list(interval), FUN = mean())
activity_summarized <- aggregate( activity_completed, by = list(interval), FUN = mean(steps))
activity_summarized <- aggregate( activity_completed, by = list(interval), FUN = mean
)
with(activity_completed,activity_summarized <- aggregate( by = list(interval), FUN = mean
)
)
with(activity_completed,activity_summarized <- aggregate( by = list(interval), FUN = mean)
)
with(activity_completed,activity_summarized <- aggregate( by = list(interval), mean)
)
aggregate(steps ~ c(interval,weekend), activity_completed, mean)
activity_summarized <- aggregate( activity_completed, by = list((activity_completed$weekend == "weekend"), activity_completed$interval), FUN = mean)
activity_summarized <- aggregate( activity_completed, by = list((activity_completed$weekend == "weekend"), activity_completed$interval), mean)
rm(activity_summarized)
ls()
activity_summarized <- aggregate( activity_completed, by = list((activity_completed$weekend == "weekend"), activity_completed$interval), mean)
ls()
activity_summarized
activity_summarized <- aggregate( activity_completed, by = list((activity_completed$weekend ), activity_completed$interval), mean)
activity_summarized
activity_summarized <- aggregate( activity_completed, by = list(weekend , activity_completed$interval), mean)
activity_summarized <- aggregate( activity_completed, by = list(activity_completed$weekend , activity_completed$interval), mean)
warnings()
activity_summarized <- aggregate( activity_completed$steps, by = list(activity_completed$weekend , activity_completed$interval), mean)
activity_summarized <- aggregate( activity_completed, by = list(weekend , activity_completed$interval), mean)
head(activity_summarized)
activity_summarized <- aggregate(x = activity_completed, steps, by = list(activity_completed$weekend , activity_completed$interval), mean)
activity_summarized <- aggregate(activity_completed$steps, by = list(activity_completed$weekend , activity_completed$interval), mean)
xyplot(steps ~  Group.2| Group.1, data = activity_summarized, type = "l", layout = c(1, 2), lty=1, xlab = "Interval", ylab = "Number of steps")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
head(activity_summarized)
xyplot(x ~  Group.2| Group.1, data = activity_summarized, type = "l", layout = c(1, 2), lty=1, xlab = "Interval", ylab = "Number of steps")
activity_summarized <- aggregate(activity_completed$steps, by = list(activity_completed$weekend , activity_completed$interval), mean)
activity_summarized <- with(activity, aggregate(steps ~ interval))
activity_summarized <- with(activity, aggregate(steps ~ interval,  mean))
activity_summarized <- aggregate(steps ~ interval, activity,  mean)
head(activity_summarized)
with(activity_summarized, plot( y = steps, x = intrval, type="l", main = "Time series plot of steps in the 5-minute intervalls",lty= 1, xlab = "Time intervals of 5 min.", ylab = "Number of steps"))
with(activity_summarized, plot( y = steps, x = interval, type="l", main = "Time series plot of steps in the 5-minute intervalls",lty= 1, xlab = "Time intervals of 5 min.", ylab = "Number of steps"))
abline(h = mean(activity$steps, na.rm = TRUE), lwd = 2, col = "red")
legend("topright", legend = "Steps taken, avg. all days", lty = 1, col = "red" )
activity_summarized_interval$interval[which.max(activity_summarized_interval$steps)]
mins <- activity_summarized_interval$interval[which.max(activity_summarized_interval$steps)]
hours <- as.integer(mins/60)
mins <- mins%%60
strptime(paste(hours,minutes), "%H %M", tz = "UTC")
with(activity_summarized_interval,interval[which.max(steps)]
with(activity_summarized_interval,interval[which.max(steps)])
with(activity_summarized_interval,interval[which.max(steps)])
mins <- with(activity_summarized_interval,interval[which.max(steps)])
hours <- as.integer(mins/60)
mins <- mins%%60
strptime(paste(hours,minutes), "%H %M", tz = "UTC")
mins <- with(activity_summarized_interval,interval[which.max(steps)])
hours <- as.integer(mins/60)
mins <- mins%%60
strptime(paste(hours,minutes), "%H %M")
mins <- with(activity_summarized_interval,interval[which.max(steps)])
hours <- as.integer(mins/60)
mins <- mins%%60
strptime(paste(hours,minutes), "%H %M", tz = "UTC")
activity_completed$interval
max(activity_completed$interval)
table(activity$interval)
table(activity$day)
table(as.factor(activity$day))
as.factor(activity$day
)
activity$day
activity$date
table(as.factor(activity$date))
activity[activity$date == "2012-11-30"]
render("PA1_template.Rmd", clean = FALSE)
aggregate(activity$steps, by=list(activity$date), sum)
system.time(aggregate(activity$steps, by=list(activity$date), sum))
system.time(aggregate(activity$steps, by=list(activity$date), sum))
aactivity%>%group_by(activity,date)
activity%>%group_by(activity,date)
system.time(activity%>%group_by(activity,date))
system.time(activity%>%group_by(activity,date))
dplr < -system.time(activity%>%group_by(activity,date))
dplr <- system.time(activity%>%group_by(activity,date))
gaggr <- aggregate(activity$steps, by=list(activity$date), sum)
identical(dplr,gaggr)
dim(gaggr)
dim(dplr)
dplr <- activity%>%group_by(activity,date)
identical(dplr,gaggr)
dim(dplr)
dplr <- activity%>%group_by(activity,date)%>%summarize(activity,steps)
dplr <- activity%>%group_by(activity,date)%>%summarize(activity,MeanSteps = mean(steps))
activity_completed%>%group_by(date)%>%summarize(SumSteps = sum(steps, na.rm = TRUE), MeanSteps = mean(steps, na.rm = TRUE), MedianSteps = median(steps, na.rm = TRUE))
system.time(activity_completed%>%group_by(date)%>%summarize(SumSteps = sum(steps, na.rm = TRUE), MeanSteps = mean(steps, na.rm = TRUE), MedianSteps = median(steps, na.rm = TRUE)))
system.time(activity_completed%>%group_by(date)%>%summarize(SumSteps = sum(steps, na.rm = TRUE), MeanSteps = mean(steps, na.rm = TRUE), MedianSteps = median(steps, na.rm = TRUE)))
system.time(activity_completed%>%group_by(date)%>%summarize(SumSteps = sum(steps, na.rm = TRUE), MeanSteps = mean(steps, na.rm = TRUE), MedianSteps = median(steps, na.rm = TRUE)))
system.time(activity_completed%>%group_by(date)%>%summarize(SumSteps = sum(steps, na.rm = TRUE), MeanSteps = mean(steps, na.rm = TRUE), MedianSteps = median(steps, na.rm = TRUE)))
system.time(activity_completed%>%group_by(date)%>%summarize(SumSteps = sum(steps, na.rm = TRUE), mean)
)
head(activity)
head(aggregate(activity$steps, by=list(activity$date), sum))
head(activity)
head(aggregate(activity$steps, by=list(activity$date), sum))
head(activity%>%group_by(date))
head(activity%>%group_by(date)%>%summarize(x = sum(steps))
)
system.time(activity%>%group_by(date)%>%summarize(x = sum(steps)
)
)
system.time(activity%>%group_by(date)%>%summarize(x = sum(steps)))
system.time(activity%>%group_by(date)%>%summarize(x = sum(steps)))
system.time(aggregate(activity$steps, by=list(activity$date), sum))
system.time(aggregate(activity$steps, by=list(activity$date), sum))
system.time(aggregate(activity$steps, by=list(activity$date), sum))
sum(is.na(activity$steps))
activity[is.na(activity$steps),]
Sys.setlocale("LC_TIME", "en_US.UTF-8")
Sys.setlocale("LC_TIME", "en_US.utf8")
Sys.setlocale("LC_TIME", "en_US.UTF-8")
date()
Sys.time()
Sys.time()
?setlocale
?Sys.setlocale
??locale
install.packages(c("htmltools", "packrat", "Rcpp", "rsconnect", "swirl"))
time_series<-tapply(activity$steps, activity$interval, mean, na.rm = TRUE)
time_series
head(time_series)
max(time_series)
which(time_series==max(time_series))
which(time_series==max(time_series))
